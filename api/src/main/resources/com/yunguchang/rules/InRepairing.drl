import com.yunguchang.model.common.GpsPoint
import com.yunguchang.model.common.Car
import com.yunguchang.model.common.CarState
import java.util.List
import com.yunguchang.model.common.AlarmEvent
import com.yunguchang.model.common.Alarm
import com.yunguchang.model.common.ScheduleCar
import com.yunguchang.model.common.Schedule
import org.joda.time.DateTime

import function com.yunguchang.gps.GpsUtil.getDistance
import function com.yunguchang.alarm.RulesUtil.debug;
import function com.yunguchang.alarm.RulesUtil.info;

global javax.enterprise.event.Event alarmEventSource
global javax.enterprise.event.Event alarmClearEventSource
global java.lang.Double  garageLat
global java.lang.Double  garageLng

dialect  "mvel"

declare GpsPoint
    @role( event )
    @timestamp(sampleTime.millis)
    @expires( 12h )

end





declare AlarmEvent
    @role( event )
    @timestamp(start.millis)
end


rule "fire inrepairing driving when a repairing car is far away from depot"
    no-loop true
    when
        $car:Car($carId:id, carState==CarState.REPAIRING ,depot!=null)
        $points:List( size >0 )
                                from collect( GpsPoint(car.id==$carId, speed > 0) over window:time( 2m ) )
        not ( GpsPoint(eval(getDistance(this.lat,this.lng,garageLat,garageLng)<20000)) from $points)
        $lastPoint : GpsPoint() from $points.get($points.size-1)
        List(size == 0) from collect ( AlarmEvent(car.id==$carId,alarm==Alarm.INREPAIRING, end==null ))
    then
        with (alarmEvent = new AlarmEvent()) {
               alarm = Alarm.INREPAIRING,
               car = $car,
               start = $lastPoint.sampleTime,
               gpsPoint = $lastPoint
            };
        insert(alarmEvent);
        alarmEventSource.fire(alarmEvent);
        info(drools,alarmEvent);

end




rule "clear inrepairing alarm when car is not in repairing"
    no-loop true
    when
         $car:Car($carId:id,carState!=CarState.REPAIRING)
         $alarmEvent: AlarmEvent(car.id==$carId,alarm==Alarm.INREPAIRING, end==null)

    then
        $alarmEvent.end=new DateTime(drools.getWorkingMemory().getSessionClock().getCurrentTime());
        update($alarmEvent)
        clearAlarmEventSource.fire($alarmEvent);
        info(drools,$alarmEvent);
end


rule "clear inrepairing alarm when car is return to garage"
    no-loop true
    when
         $car:Car($carId:id,carState!=CarState.REPAIRING)
         $alarmEvent: AlarmEvent(car.id==$carId,alarm==Alarm.INREPAIRING, end==null)
         $points:List( size >0 )
                                              from collect( GpsPoint(car.id==$carId) over window:time( 2m ) )
         not ( GpsPoint(eval(getDistance(this.lat,this.lng,garageLat,garageLng)>20000)) from $points)

    then
        $alarmEvent.end=new DateTime(drools.getWorkingMemory().getSessionClock().getCurrentTime());
        update($alarmEvent)
        clearAlarmEventSource.fire($alarmEvent);
        info(drools,$alarmEvent);
end
